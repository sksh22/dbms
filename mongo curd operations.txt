Create Employee collection by considering following Fields: 
i. Name: Embedded Doc (FName, LName)
ii. Company Name: String 
iii. Salary: Number
iv. Designation: String
v. Age: Number
vi. Expertise: Array 
vii. DOB: String or Date
viii. Email id: String
ix. Contact: String 
x. Address: Array of Embedded Doc (PAddr, LAddr)

db.Employee.insertOne({
  Name: { FName: "menka", LName: "Doe" },
  CompanyName: "Infosys",
  Salary: 99000,
  Designation: "Tester",
  Age: 33,
  Expertise: ['Mongodb','Mysql','Cassandra'],
  DOB: "1995-05-15", 
  EmailId: "joh22.doe@example.com",
  Contact: "123-456-7890",
  Address: [{ PAddr: "123 Main Street", LAddr: "Apt 4B" },
    { PAddr: "456 Oak Avenue", LAddr: "" } ]});


#################################################################################

1. Select all documents where the Designation field has the value "Programmer" and the value of the salary field is greater than 30000.
-->db.Employee.find({ Designation: "Programmer", Salary: { $gt: 30000 } });

2. Creates a new document if no document in the employee collection contains {Designation: "Tester", Company_name: "TCS", Age: 25}
-->db.Employee.update(
  { Designation: "Tester", CompanyName: "TCS", Age: 25 },
  { $setOnInsert: { Designation: "Tester", CompanyName: "TCS", Age: 25, Salary: 0 } },
  { upsert: true }
);

3. Increase salary of each Employee working with â€œInfosys" 10000. 
-->db.Employee.updateMany({ CompanyName: "Infosys" }, { $inc: { Salary: 10000 } });

4. Finds all employees working with "TCS" and reduce their salary by 5000.
-->db.Employee.updateMany({ CompanyName: "TCS" }, { $inc: { Salary: -5000 } });

5. Return documents where Designation is not equal to "Tester".
-->db.Employee.find({ Designation: { $ne: "Tester" } });

6. Find all employee with Exact Match on an Array having Expertise: ['Mongodb','Mysql','Cassandra']
-->db.Employee.find({ Expertise: ['Mongodb', 'Mysql', 'Cassandra'] });


#############################################################################

1. Final name of Employee where age is less than 30 and salary more than 50000. 
-->db.Employee.find(
  { Age: { $lt: 30 }, Salary: { $gt: 50000 } },
  { "Name.FName": 1, "Name.LName": 1, _id: 0 }
);

2. Creates a new document if no document in the employee collection contains
 {Designation: "Tester", Company_name: "TCS", Age: 25}
-->db.Employee.update(
  { Designation: "Tester", CompanyName: "TCS", Age: 25 },
  { $setOnInsert: { Designation: "Tester", CompanyName: "TCS", Age: 25, Salary: 0 } },
  { upsert: true });

3. Selects all documents in the collection where the field age has a value less than 30 or the value of the salary field is greater than 40000.
-->db.Employee.find({ $or: [{ Age: { $lt: 30 } }, { Salary: { $gt: 40000 } }] });

4. Find documents where Designation is not equal to "Developer".
-->db.Employee.find({ Designation: { $ne: "Developer" } });

5. Find _id, Designation, Address and Name from all documents where Company_name is "Infosys".
-->db.Employee.find({ CompanyName: "Infosys" }, { _id: 1, Designation: 1, Address: 1, "Name.FName": 1, "Name.LName": 1 });

6. Display only FName and LName of all Employees
-->db.Employee.find({}, { "Name.FName": 1, "Name.LName": 1, _id: 0 });


########################################################################################

1. Creates a new document if no document in the employee collection contains {Designation: "Tester", Company_name: "TCS", Age: 25}
-->db.Employee.update(
  { Designation: "Tester", CompanyName: "TCS", Age: 25 },
  { $setOnInsert: { Designation: "Tester", CompanyName: "TCS", Age: 25, Salary: 0 } },
  { upsert: true });

2. Finds all employees working with Company_name: "TCS" and increase their salary by 2000.
--> db.Employee.updateMany({ CompanyName: "TCS" }, { $inc: { Salary: 2000 } });

3. Matches all documents where the value of the field Address is an embedded document that contains only the field city with the value "Pune" and the field Pin_code with the value 
"411001".
-->db.Employee.find({
  "Address": { $elemMatch: { city: "Pune", Pin_code: "411001" } }
});

4. Find employee details who are working as "Developer" or "Tester".
-->db.Employee.find({ Designation: { $in: ["Developer", "Tester"] } });

5. Drop Single documents where designation="Developer".
-->db.Employee.deleteOne({ Designation: "Developer" });

6. Count number of documents in employee collection.
-->db.Employee.countDocuments();






